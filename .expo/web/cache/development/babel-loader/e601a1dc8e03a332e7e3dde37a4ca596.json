{"ast":null,"code":"\"use strict\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adish\\\\Documents\\\\GitHub\\\\ticitacatoey\\\\node_modules\\\\react-native-qrcode-generator\\\\lib\\\\Canvas.js\";\n\nvar React = require(\"react\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar createReactClass = require(\"create-react-class\");\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar Platform = require(\"react-native-web/dist/exports/Platform\").default;\n\nvar _require = require(\"react-native-webview\"),\n    WebView = _require.WebView;\n\nfunction getRenderHTML(context, render, generator) {\n  return \"\\n    <meta name=\\\"viewport\\\" content=\\\"initial-scale=1.0, maximum-scale=1.0\\\">\\n    <style>\\n        *{margin:0;padding:0;overflow:hidden;}canvas{transform:translateZ(0);}\\n    </style>\\n    <canvas></canvas>\\n    <script>\\n        var canvas = document.querySelector('canvas');\\n        (\" + render + \").call(\" + context + \", canvas);\\n        (\" + generator + \").call('', \" + context + \" , canvas);\\n    </script>\\\"\\n    \";\n}\n\nfunction generateImage(context, canvas) {\n  if (!window.ReactNativeWebView.postMessage) {\n    setTimeout(function () {\n      generateImage.call(this, context, canvas);\n    }, 100);\n  } else {\n    var image = document.createElement(\"canvas\");\n    var imageContext = image.getContext(\"2d\");\n    image.width = context.size;\n    image.height = context.size;\n    imageContext.fillStyle = context.bgColor;\n    imageContext.fillRect(0, 0, context.size, context.size);\n    imageContext.drawImage(canvas, 0, 0);\n    window.ReactNativeWebView.postMessage(image.toDataURL());\n  }\n}\n\nvar Canvas = createReactClass({\n  displayName: \"Canvas\",\n  propTypes: {\n    style: PropTypes.object,\n    context: PropTypes.object,\n    render: PropTypes.func.isRequired,\n    onLoad: PropTypes.func,\n    onLoadEnd: PropTypes.func\n  },\n  getImage: function getImage(event) {\n    if (this.props.generateImage) {\n      this.props.generateImage(event.nativeEvent.data);\n    }\n  },\n  render: function render() {\n    var contextString = JSON.stringify(this.props.context);\n    var renderString = this.props.render.toString();\n    var generate = generateImage.toString();\n    return React.createElement(View, {\n      style: this.props.style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, React.createElement(WebView, {\n      automaticallyAdjustContentInsets: false,\n      scalesPageToFit: false,\n      contentInset: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      source: {\n        html: getRenderHTML(contextString, renderString, generate),\n        baseUrl: \"\"\n      },\n      opaque: false,\n      underlayColor: \"transparent\",\n      overScrollMode: \"never\",\n      style: this.props.style,\n      javaScriptEnabled: true,\n      scrollEnabled: false,\n      onLoad: this.props.onLoad,\n      onLoadEnd: this.props.onLoadEnd,\n      originWhitelist: [\"*\"],\n      onMessage: this.getImage,\n      showsVerticalScrollIndicator: false,\n      showsHorizontalScrollIndicator: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }));\n  }\n});\nmodule.exports = Canvas;","map":{"version":3,"sources":["C:/Users/adish/Documents/GitHub/ticitacatoey/node_modules/react-native-qrcode-generator/lib/Canvas.js"],"names":["React","require","PropTypes","createReactClass","WebView","getRenderHTML","context","render","generator","generateImage","canvas","window","ReactNativeWebView","postMessage","setTimeout","call","image","document","createElement","imageContext","getContext","width","size","height","fillStyle","bgColor","fillRect","drawImage","toDataURL","Canvas","propTypes","style","object","func","isRequired","onLoad","onLoadEnd","getImage","event","props","nativeEvent","data","contextString","JSON","stringify","renderString","toString","generate","top","right","bottom","left","html","baseUrl","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar React = require(\"react\");\nvar PropTypes = require(\"prop-types\");\nvar createReactClass = require(\"create-react-class\");\n\nvar { View, Platform } = require(\"react-native\");\nvar { WebView } = require(\"react-native-webview\");\n\nfunction getRenderHTML(context, render, generator) {\n  return `\n    <meta name=\"viewport\" content=\"initial-scale=1.0, maximum-scale=1.0\">\n    <style>\n        *{margin:0;padding:0;overflow:hidden;}canvas{transform:translateZ(0);}\n    </style>\n    <canvas></canvas>\n    <script>\n        var canvas = document.querySelector('canvas');\n        (${render}).call(${context}, canvas);\n        (${generator}).call('', ${context} , canvas);\n    </script>\"\n    `;\n}\n\nfunction generateImage(context, canvas) {\n  if (!window.ReactNativeWebView.postMessage) {\n    setTimeout(function () {\n      generateImage.call(this, context, canvas);\n    }, 100);\n  } else {\n    const image = document.createElement(\"canvas\");\n    const imageContext = image.getContext(\"2d\");\n    image.width = context.size;\n    image.height = context.size;\n    imageContext.fillStyle = context.bgColor;\n    imageContext.fillRect(0, 0, context.size, context.size);\n    imageContext.drawImage(canvas, 0, 0);\n    window.ReactNativeWebView.postMessage(image.toDataURL());\n  }\n}\n\nvar Canvas = createReactClass({\n  propTypes: {\n    style: PropTypes.object,\n    context: PropTypes.object,\n    render: PropTypes.func.isRequired,\n    onLoad: PropTypes.func,\n    onLoadEnd: PropTypes.func\n  },\n\n  getImage: function(event) {\n    if (this.props.generateImage) {\n      this.props.generateImage(event.nativeEvent.data);\n    }\n  },\n\n  render() {\n    var contextString = JSON.stringify(this.props.context);\n    var renderString = this.props.render.toString();\n    var generate = generateImage.toString();\n    return (\n      <View style={this.props.style}>\n        <WebView\n          automaticallyAdjustContentInsets={false}\n          scalesPageToFit={false}\n          contentInset={{ top: 0, right: 0, bottom: 0, left: 0 }}\n          source={{\n            html: getRenderHTML(contextString, renderString, generate),\n            baseUrl: \"\"\n          }}\n          opaque={false}\n          underlayColor={\"transparent\"}\n          overScrollMode=\"never\"\n          style={this.props.style}\n          javaScriptEnabled={true}\n          scrollEnabled={false}\n          onLoad={this.props.onLoad}\n          onLoadEnd={this.props.onLoadEnd}\n          originWhitelist={[\"*\"]}\n          onMessage={this.getImage}\n          showsVerticalScrollIndicator={false}\n          showsHorizontalScrollIndicator={false}\n        />\n      </View>\n    );\n  }\n});\n\nmodule.exports = Canvas;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\adish\\\\Documents\\\\GitHub\\\\ticitacatoey\\\\components\\\\grid.tsx\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport GridSquare from \"./gridSquare\";\nexport default function Grid(_ref) {\n  var size = _ref.size,\n      data = _ref.data,\n      onGridSquarePressed = _ref.onGridSquarePressed;\n\n  var _useState = useState(data),\n      _useState2 = _slicedToArray(_useState, 2),\n      boardData = _useState2[0],\n      setBoardData = _useState2[1];\n\n  var _useState3 = useState(size),\n      _useState4 = _slicedToArray(_useState3, 2),\n      boardSize = _useState4[0],\n      setBoardSize = _useState4[1];\n\n  var screenWidth = Math.round(Dimensions.get('window').width);\n  var screenHeight = Math.round(Dimensions.get('window').height);\n\n  var onSquarePressed = function onSquarePressed(key) {\n    onGridSquarePressed(key);\n  };\n\n  var rows = [];\n\n  for (var i = 0; i < boardSize; i++) {\n    var cols = [];\n\n    for (var j = 0; j < boardSize; j++) {\n      var key = i * boardSize + j;\n      cols.push(React.createElement(GridSquare, {\n        key: key,\n        xo: boardData[j + i * boardSize],\n        index: key,\n        onGridSquarePressed: function onGridSquarePressed(key) {\n          onSquarePressed(key);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 23\n        }\n      }));\n    }\n\n    rows.push(React.createElement(View, {\n      style: styles.containerRow,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, cols));\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.header,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.titleText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, \"Header\")), React.createElement(View, {\n    style: [styles.body, {\n      maxHeight: screenWidth\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, rows), React.createElement(View, {\n    style: styles.header,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.titleText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"Footer\")));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ddd',\n    flexDirection: 'column'\n  },\n  containerRow: {\n    flex: 1,\n    backgroundColor: '#ddd',\n    flexDirection: 'row'\n  },\n  header: {\n    flex: 1,\n    borderRadius: 50,\n    flexDirection: 'column',\n    backgroundColor: '#46e0ff',\n    justifyContent: 'center',\n    elevation: 3,\n    shadowColor: '#111',\n    shadowOpacity: 1,\n    shadowRadius: 3,\n    opacity: 0,\n    borderColor: '#46e0ff'\n  },\n  titleText: {\n    flex: 1,\n    padding: 10,\n    fontSize: 42,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    textTransform: 'capitalize',\n    color: '#FFF'\n  },\n  body: {\n    flex: 3,\n    marginVertical: 25,\n    marginHorizontal: 2\n  }\n});","map":{"version":3,"sources":["C:/Users/adish/Documents/GitHub/ticitacatoey/components/grid.tsx"],"names":["React","useState","GridSquare","Grid","size","data","onGridSquarePressed","boardData","setBoardData","boardSize","setBoardSize","screenWidth","Math","round","Dimensions","get","width","screenHeight","height","onSquarePressed","key","rows","i","cols","j","push","styles","containerRow","container","header","titleText","body","maxHeight","StyleSheet","create","flex","backgroundColor","flexDirection","borderRadius","justifyContent","elevation","shadowColor","shadowOpacity","shadowRadius","opacity","borderColor","padding","fontSize","textAlign","fontWeight","textTransform","color","marginVertical","marginHorizontal"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { StyleSheet, View, Text, Dimensions } from 'react-native';\r\nimport GridSquare from './gridSquare';\r\n\r\nexport default function Grid({ size, data, onGridSquarePressed }) {\r\n\r\n    const [boardData, setBoardData] = useState(data);\r\n    const [boardSize, setBoardSize] = useState(size);\r\n\r\n    const screenWidth = Math.round(Dimensions.get('window').width);\r\n    const screenHeight = Math.round(Dimensions.get('window').height);\r\n\r\n    const onSquarePressed = (key) => {\r\n        onGridSquarePressed(key)\r\n    }\r\n\r\n    var rows = []\r\n    for (let i = 0; i < boardSize; i++) {\r\n        var cols = []\r\n        for (let j = 0; j < boardSize; j++) {\r\n            let key = i * boardSize + j\r\n            cols.push(<GridSquare key={key} xo={boardData[j + (i * boardSize)]} index={key} onGridSquarePressed={(key) => { onSquarePressed(key) }} />)\r\n        }\r\n        rows.push(\r\n            <View style={styles.containerRow} key={i}>\r\n                {cols}\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.header}>\r\n                <Text style={styles.titleText}>Header</Text>\r\n            </View>\r\n            <View style={[styles.body, { maxHeight: screenWidth }]}>\r\n                {rows}\r\n            </View>\r\n            <View style={styles.header}>\r\n                <Text style={styles.titleText}>Footer</Text>\r\n            </View>\r\n        </View >\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#ddd',\r\n        flexDirection: 'column',\r\n    },\r\n    containerRow: {\r\n        flex: 1,\r\n        backgroundColor: '#ddd',\r\n        flexDirection: 'row',\r\n    },\r\n    header: {\r\n        flex: 1,\r\n        borderRadius: 50,\r\n        flexDirection: 'column',\r\n        backgroundColor: '#46e0ff',\r\n        justifyContent: 'center',\r\n        elevation: 3,\r\n        shadowColor: '#111',\r\n        shadowOpacity: 1,\r\n        shadowRadius: 3,\r\n        opacity: 0,\r\n        borderColor: '#46e0ff',\r\n    },\r\n    titleText: {\r\n        flex: 1,\r\n        padding: 10,\r\n        fontSize: 42,\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        textTransform: 'capitalize',\r\n        color: '#FFF',\r\n    },\r\n    body: {\r\n        flex: 3,\r\n        marginVertical: 25,\r\n        marginHorizontal: 2,\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}
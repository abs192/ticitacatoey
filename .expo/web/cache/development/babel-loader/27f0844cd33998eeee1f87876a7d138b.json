{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _jsxFileName = \"C:\\\\Users\\\\adish\\\\Documents\\\\GitHub\\\\ticitacatoey\\\\screens\\\\GameScreen.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Grid from \"../components/grid\";\nimport ToastModal from \"../components/modals/ToastModal\";\nimport { Game, MessageTypes } from \"../game/model\";\nimport QRCodeGen from 'react-native-qrcode-generator';\nimport TModal from \"../components/modal\";\n\nvar GameManager = function () {\n  function GameManager() {\n    _classCallCheck(this, GameManager);\n\n    this.EMPTY = \" \";\n    this.game = new Game();\n    this.xo = \"x\";\n  }\n\n  _createClass(GameManager, [{\n    key: \"onMessage\",\n    value: function onMessage(obj) {\n      switch (obj.type) {\n        case MessageTypes.REGISTER_PLAYER:\n          {\n            this.playerId = obj.playerId;\n            console.log('registerd ' + obj.playerId);\n            break;\n          }\n\n        case MessageTypes.START_GAME:\n          {\n            this.playerId = obj.playerId;\n            console.log('game started ' + obj.playerId);\n            break;\n          }\n\n        case MessageTypes.MAKE_MOVE:\n          {\n            break;\n          }\n\n        case MessageTypes.JOIN_GAME:\n          {\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"makeMove\",\n    value: function makeMove(data, key, callback) {\n      var legalMove = false;\n\n      if (data[key] == this.EMPTY) {\n        legalMove = true;\n      }\n\n      if (legalMove) {\n        callback(this.xo);\n        this.switchMove();\n      }\n    }\n  }, {\n    key: \"registerPlayer\",\n    value: function registerPlayer(ws, player) {\n      var msg = JSON.stringify(_objectSpread({\n        type: MessageTypes.REGISTER_PLAYER\n      }, player));\n      console.log(\"registering msg: \" + msg);\n      ws.send(msg);\n    }\n  }, {\n    key: \"startGame\",\n    value: function startGame(ws, player) {\n      var msg = JSON.stringify(_objectSpread({\n        type: MessageTypes.START_GAME\n      }, player));\n      console.log(\"registering msg: \" + msg);\n      ws.send(msg);\n    }\n  }, {\n    key: \"switchMove\",\n    value: function switchMove() {\n      if (this.xo == \"x\") {\n        this.xo = \"o\";\n      } else {\n        this.xo = \"x\";\n      }\n    }\n  }]);\n\n  return GameManager;\n}();\n\nvar GameScreen = function (_Component) {\n  _inherits(GameScreen, _Component);\n\n  var _super = _createSuper(GameScreen);\n\n  function GameScreen(props) {\n    var _this;\n\n    _classCallCheck(this, GameScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n      isLoading: false,\n      showQR: true,\n      socketOpen: false,\n      gameStarted: true,\n      socketConnected: false,\n      isOnlineGame: true,\n      updated: true,\n      isYourMove: true,\n      scanned: false\n    };\n    _this.gameManager = new GameManager();\n    _this.onSquareClicked = _this.onSquareClicked.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(GameScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log('mount');\n\n      if (this.state.isOnlineGame) {\n        console.log('yes');\n        this.socket = new WebSocket('ws://192.168.1.8:8080');\n\n        this.socket.onopen = function () {\n          console.log('ws open');\n          var player = {\n            name: \"abs\"\n          };\n\n          _this2.gameManager.registerPlayer(_this2.socket, player);\n        };\n\n        this.socket.onerror = function (_ref) {\n          var data = _ref.data;\n          return console.log('ws error');\n        };\n\n        this.socket.onmessage = function (_ref2) {\n          var data = _ref2.data;\n          console.log(\"on message \" + data + \" | \" + JSON.parse(data));\n\n          try {\n            _this2.gameManager.onMessage(JSON.parse(data));\n          } catch (Exception) {}\n        };\n      }\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(msg) {\n      if (this.state.isOnlineGame) {\n        this.socket.send(JSON.stringify({\n          type: 'greet',\n          payload: 'Hello Mr. Server!'\n        }));\n      } else {}\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log('update');\n    }\n  }, {\n    key: \"onSquareClicked\",\n    value: function onSquareClicked(key) {\n      var _this3 = this;\n\n      if (this.state.gameStarted && this.state.isYourMove) {\n        this.gameManager.makeMove(this.state.data, key, function (xo) {\n          var d = _this3.state.data;\n          d[key] = xo;\n\n          _this3.setState({\n            data: d\n          });\n        });\n      }\n\n      console.log(this.state.data);\n    }\n  }, {\n    key: \"handleBarCodeScanned\",\n    value: function handleBarCodeScanned(type, data) {\n      this.setState({\n        scanned: true\n      });\n      alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      }, React.createElement(ToastModal, {\n        isLoading: this.state.isLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }\n      }), React.createElement(TModal, {\n        animationType: \"fade\",\n        visible: this.state.showQR,\n        transparent: true,\n        dismiss: function dismiss() {\n          _this4.setState({\n            showQR: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: styles.qrCodeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }\n      }, React.createElement(QRCodeGen, {\n        value: \"abc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }\n      }), React.createElement(Text, {\n        style: styles.qrCodeText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }\n      }, \"Scan this QR Code on your friend's app to join\"))), React.createElement(Grid, {\n        size: 3,\n        data: this.state.data,\n        onGridSquarePressed: function onGridSquarePressed(key) {\n          return _this4.onSquareClicked(key);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return GameScreen;\n}(Component);\n\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ddd',\n    flexDirection: 'column'\n  },\n  qrCodeModal: {\n    flexDirection: 'row',\n    margin: 20,\n    padding: 20,\n    justifyContent: \"center\",\n    backgroundColor: \"#fff\",\n    borderRadius: 20,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    opacity: 1\n  },\n  qrCodeText: {\n    flex: 1,\n    margin: 15,\n    fontWeight: 'bold',\n    fontSize: 24,\n    flexWrap: 'wrap'\n  }\n});","map":{"version":3,"sources":["C:/Users/adish/Documents/GitHub/ticitacatoey/screens/GameScreen.tsx"],"names":["React","Component","Grid","ToastModal","Game","MessageTypes","QRCodeGen","TModal","GameManager","EMPTY","game","xo","obj","type","REGISTER_PLAYER","playerId","console","log","START_GAME","MAKE_MOVE","JOIN_GAME","data","key","callback","legalMove","switchMove","ws","player","msg","JSON","stringify","send","GameScreen","props","state","isLoading","showQR","socketOpen","gameStarted","socketConnected","isOnlineGame","updated","isYourMove","scanned","gameManager","onSquareClicked","bind","socket","WebSocket","onopen","name","registerPlayer","onerror","onmessage","parse","onMessage","Exception","payload","makeMove","d","setState","alert","styles","container","qrCodeModal","qrCodeText","StyleSheet","create","flex","backgroundColor","flexDirection","margin","padding","justifyContent","borderRadius","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","opacity","fontWeight","fontSize","flexWrap"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, StyleSheet, View } from 'react-native';\r\nimport Grid from '../components/grid';\r\nimport ToastModal from '../components/modals/ToastModal';\r\nimport { Game, Player, MessageTypes } from '../game/model';\r\nimport QRCodeGen from 'react-native-qrcode-generator';\r\nimport TModal from '../components/modal';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n\r\nclass GameManager {\r\n\r\n    EMPTY = \" \"\r\n\r\n    constructor() {\r\n        this.game = new Game()\r\n        this.xo = \"x\"\r\n    }\r\n\r\n    onMessage(obj) {\r\n        switch (obj.type) {\r\n            case MessageTypes.REGISTER_PLAYER:\r\n                {\r\n                    this.playerId = obj.playerId;\r\n                    console.log('registerd ' + obj.playerId);\r\n                    break;\r\n                }\r\n            case MessageTypes.START_GAME:\r\n                {\r\n                    this.playerId = obj.playerId;\r\n                    console.log('game started ' + obj.playerId);\r\n                    break;\r\n                }\r\n            case MessageTypes.MAKE_MOVE:\r\n                {\r\n\r\n                    break;\r\n                }\r\n            case MessageTypes.JOIN_GAME: {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    makeMove(data, key, callback) {\r\n        let legalMove = false\r\n\r\n        if (data[key] == this.EMPTY) {\r\n            legalMove = true\r\n        }\r\n\r\n        if (legalMove) {\r\n            callback(this.xo)\r\n            this.switchMove()\r\n        }\r\n    }\r\n\r\n    registerPlayer(ws, player) {\r\n        let msg = JSON.stringify({ type: MessageTypes.REGISTER_PLAYER, ...player })\r\n        console.log(\"registering msg: \" + msg)\r\n        ws.send(msg)\r\n    }\r\n\r\n    startGame(ws, player) {\r\n        let msg = JSON.stringify({ type: MessageTypes.START_GAME, ...player })\r\n        console.log(\"registering msg: \" + msg)\r\n        ws.send(msg)\r\n    }\r\n\r\n    switchMove() {\r\n        if (this.xo == \"x\") {\r\n            this.xo = \"o\";\r\n        } else {\r\n            this.xo = \"x\";\r\n        }\r\n    }\r\n}\r\n\r\nclass GameScreen extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \",],\r\n            isLoading: false,\r\n            showQR: true,\r\n            socketOpen: false,\r\n            gameStarted: true,\r\n            socketConnected: false,\r\n            // isOnlineGame: this.props.isOnlineGame,\r\n            isOnlineGame: true,\r\n            updated: true,\r\n            isYourMove: true,\r\n            scanned: false,\r\n        };\r\n\r\n        this.gameManager = new GameManager()\r\n        this.onSquareClicked = this.onSquareClicked.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('mount')\r\n        if (this.state.isOnlineGame) {\r\n            console.log('yes')\r\n            this.socket = new WebSocket('ws://192.168.1.8:8080')\r\n            this.socket.onopen = () => {\r\n                console.log('ws open')\r\n                let player = {\r\n                    name: \"abs\"\r\n                }\r\n                this.gameManager.registerPlayer(this.socket, player)\r\n            }\r\n            this.socket.onerror = ({ data }) => console.log('ws error')\r\n            this.socket.onmessage = ({ data }) => {\r\n                console.log(\"on message \" + data + \" | \" + JSON.parse(data))\r\n                try {\r\n                    this.gameManager.onMessage(JSON.parse(data))\r\n                } catch (Exception) {\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        // (async () => {\r\n        //     const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n        //     this.setState({\r\n        //         scanned:\r\n        //             (status === 'granted')\r\n        //     })\r\n        // })\r\n    }\r\n\r\n    emit(msg) {\r\n        if (this.state.isOnlineGame) {\r\n            this.socket.send(JSON.stringify({ type: 'greet', payload: 'Hello Mr. Server!' }))\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate() {\r\n        console.log('update')\r\n    }\r\n    //     this.socket.onclose = () => console.log('ws closed')\r\n    // }\r\n\r\n    onSquareClicked(key) {\r\n        if (this.state.gameStarted && this.state.isYourMove) {\r\n            this.gameManager.makeMove(this.state.data, key, (xo) => {\r\n                var d = this.state.data\r\n                d[key] = xo\r\n                this.setState({\r\n                    data: d\r\n                })\r\n            })\r\n        }\r\n        console.log(this.state.data)\r\n    }\r\n\r\n    handleBarCodeScanned(type, data) {\r\n        this.setState({ scanned: true });\r\n        alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View style={styles.container}>\r\n                <ToastModal isLoading={this.state.isLoading} />\r\n                {/* <BarCodeScanner\r\n                    onBarCodeScanned={this.state.scanned ? undefined : this.handleBarCodeScanned}\r\n                    style={StyleSheet.absoluteFillObject}\r\n                />\r\n\r\n                {this.state.scanned && (\r\n                    <Button title={'Tap to Scan Again'} onPress={() => this.setState({ scanned: false })} />\r\n                )} */}\r\n\r\n                <TModal animationType='fade' visible={this.state.showQR} transparent={true} dismiss={() => { this.setState({ showQR: false }) }}>\r\n                    <View style={styles.qrCodeModal}>\r\n                        <QRCodeGen value=\"abc\" />\r\n                        <Text style={styles.qrCodeText}>Scan this QR Code on your friend's app to join</Text>\r\n                    </View>\r\n                </TModal>\r\n                {/* <ToastModal isLoading={this.state.isLoading} /> */}\r\n                <Grid size={3} data={this.state.data} onGridSquarePressed={(key) => this.onSquareClicked(key)} />\r\n            </View >\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#ddd',\r\n        flexDirection: 'column',\r\n    },\r\n    qrCodeModal: {\r\n        flexDirection: 'row',\r\n        margin: 20,\r\n        padding: 20,\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"#fff\",\r\n        borderRadius: 20,\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 2\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n        elevation: 5,\r\n        opacity: 1,\r\n    },\r\n    qrCodeText: {\r\n        flex: 1,\r\n        margin: 15,\r\n        fontWeight: 'bold',\r\n        fontSize: 24,\r\n        flexWrap: 'wrap',\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}